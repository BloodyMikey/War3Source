/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include "W3SIncs/War3Source_Interface"

public Plugin:myinfo = 
{
    name = "War3Source - Engine - Config",
    author = "War3Source Team",
    description = "Provides interface for loading values from configs."
}

new Handle:g_hDefaultRaceValues = INVALID_HANDLE;
new Handle:g_hDefaultItemValues = INVALID_HANDLE;
new Handle:g_hGlobalRaceDefault = INVALID_HANDLE;
new Handle:g_hGlobalItemDefault = INVALID_HANDLE;
new Handle:g_hActualRaceValues = INVALID_HANDLE;
new Handle:g_hActualItemValues = INVALID_HANDLE;

public bool:InitNativesForwards() 
{
/*    CreateNative("War3_SetRaceConfigString", Native_War3_SetRaceConfigString);
    CreateNative("War3_SetRaceConfigFloat", Native_War3_SetRaceConfigFloat);
    CreateNative("War3_SetRaceConfigInt", Native_War3_SetRaceConfigInt);
    CreateNative("War3_SetRaceConfigBool", Native_War3_SetRaceConfigBool);
    CreateNative("War3_SetRaceConfigArray", Native_War3_SetRaceConfigArray);
    CreateNative("War3_SetRaceConfigArrayValue", Native_War3_SetRaceConfigArrayValue);
    CreateNative("War3_SetRaceGlobalConfigString", Native_War3_SetRaceGlobalConfigString);
    
    CreateNative("War3_GetRaceConfigString", Native_War3_GetRaceConfigString);
    CreateNative("War3_GetRaceConfigFloat", Native_War3_GetRaceConfigFloat);
    CreateNative("War3_GetRaceConfigInt", Native_War3_GetRaceConfigInt);
    CreateNative("War3_GetRaceConfigBool", Native_War3_GetRaceConfigBool);
    CreateNative("War3_GetRaceConfigArray", Native_War3_GetRaceConfigArray);
    CreateNative("War3_GetRaceConfigArrayValue", Native_War3_GetRaceConfigArrayValue);
    
    CreateNative("War3_SetItemConfigString", Native_War3_SetItemConfigString);
    CreateNative("War3_SetItemConfigFloat", Native_War3_SetItemConfigFloat);
    CreateNative("War3_SetItemConfigInt", Native_War3_SetItemConfigInt);
    CreateNative("War3_SetItemConfigBool", Native_War3_SetItemConfigBool);
    CreateNative("War3_SetItemConfigArray", Native_War3_SetItemConfigArray);
    CreateNative("War3_SetItemConfigArrayValue", Native_War3_SetItemConfigArrayValue);
    CreateNative("War3_SetItemGlobalConfigString", Native_War3_SetRaceGlobalConfigString);
    
    CreateNative("War3_GetItemConfigString", Native_War3_GetItemConfigString);
    CreateNative("War3_GetItemConfigFloat", Native_War3_GetItemConfigFloat);
    CreateNative("War3_GetItemConfigInt", Native_War3_GetItemConfigInt);
    CreateNative("War3_GetItemConfigBool", Native_War3_GetItemConfigBool);
    CreateNative("War3_GetItemConfigArray", Native_War3_GetItemConfigArray);
    CreateNative("War3_GetItemConfigArrayValue", Native_War3_GetItemConfigArrayValue); */
    g_hGlobalRaceDefault = CreateKeyValues("Global Race Defaults");
    g_hGlobalItemDefault = CreateKeyValues("Global Item Defaults");
    return true;
}
public OnWar3PluginReady()
{
    ReloadConfig();
}
ReloadConfig()
{
    if(g_hActualRaceValues != INVALID_HANDLE) 
    {
        CloseHandle(g_hActualRaceValues);
    }
    g_hActualRaceValues = CreateKeyValues("Actual Race Values");
    KvRewind(g_hGlobalRaceDefault);
    new String:shortname[SHORTNAMELEN];
    for(new i = 1; i < War3_GetRacesLoaded(); i++) 
    {
        KvRewind(g_hActualRaceValues);
        War3_GetRaceShortname(i, shortname, sizeof(shortname));
        KvJumpToKey(g_hActualRaceValues, shortname, true);
        KvCopySubkeys(g_hGlobalRaceDefault,g_hActualRaceValues);
    }
    KvRewind(g_hActualRaceValues);
    KvRewind(g_hDefaultRaceValues);
    KvCopySubkeys(g_hDefaultRaceValues, g_hActualRaceValues);
    new String:file[PLATFORM_MAX_PATH];
    new Handle:kv;
    BuildPath(Path_SM, file, sizeof(file), "configs/war3source_races.cfg");
    if(FileExists(file))
    {
        kv = CreateKeyValues("Race Config");
        FileToKeyValues(kv, file);
        KvCopySubkeys(kv, g_hActualRaceValues);
        CloseHandle(kv);
    }
    KeyValuesToFile(kv, file);
    new String:mapname[32];
    GetCurrentMap(mapname, sizeof(mapname));
    BuildPath(Path_SM, file, sizeof(file), "configs/maps/war3source_races_%s.cfg", mapname);
    if(FileExists(file))
    {
        kv = CreateKeyValues("Race Config");
        FileToKeyValues(kv, file);
        KvCopySubkeys(kv, g_hActualRaceValues);
        CloseHandle(kv);
    }
    
    if(g_hActualItemValues != INVALID_HANDLE) 
    {
        g_hActualItemValues = CreateKeyValues("Actual Item Values");
    }
    KvRewind(g_hGlobalItemDefault);
    for(new i = 1; i < W3GetItemsLoaded(); i++) 
    {
        KvRewind(g_hActualItemValues);
        W3GetItemShortname(i, shortname, sizeof(shortname));
        KvJumpToKey(g_hActualItemValues, shortname, true);
        KvCopySubkeys(g_hGlobalItemDefault,g_hActualItemValues);
    }
    KvRewind(g_hActualItemValues);
    KvRewind(g_hDefaultItemValues);
    KvCopySubkeys(g_hDefaultItemValues, g_hActualItemValues);
    BuildPath(Path_SM, file, sizeof(file), "configs/war3source_items.cfg");
    if(FileExists(file))
    {
        kv = CreateKeyValues("Item Config");
        FileToKeyValues(kv, file);
        KvCopySubkeys(kv, g_hActualItemValues);
        CloseHandle(kv);
    }
    KeyValuesToFile(kv, file);
    GetCurrentMap(mapname, sizeof(mapname));
    BuildPath(Path_SM, file, sizeof(file), "configs/maps/war3source_Items_%s.cfg", mapname);
    if(FileExists(file))
    {
        kv = CreateKeyValues("Item Config");
        FileToKeyValues(kv, file);
        KvCopySubkeys(kv, g_hActualItemValues);
        CloseHandle(kv);
    }
}

public Native_War3_GetRaceConfigString(Handle:plugin, numParams)
{
    new raceid = GetNativeCell(1);
    new String:shortname[SHORTNAMELEN];
    War3_GetRaceShortname(raceid, shortname, sizeof(shortname));
    KvRewind(g_hActualRaceValues);
    KvJumpToKey(g_hActualRaceValues, shortname);
    new keylen;
    GetNativeStringLength(2, keylen);
    new String:key[keylen];
    GetNativeString(2, key, keylen);
    new valuelen;
    GetNativeStringLength(3, valuelen);
    new String:value[valuelen];
    KvGetString(g_hActualRaceValues, key, value, valuelen);
    SetNativeString(3, value, valuelen);
}
public Native_War3_GetRaceConfigFloat(Handle:plugin, numParams)
{
    new raceid = GetNativeCell(1);
    new String:shortname[SHORTNAMELEN];
    War3_GetRaceShortname(raceid, shortname, sizeof(shortname));
    KvRewind(g_hActualRaceValues);
    KvJumpToKey(g_hActualRaceValues, shortname);
    new keylen;
    GetNativeStringLength(2, keylen);
    new String:key[keylen];
    GetNativeString(2, key, keylen);
    return _:KvGetFloat(g_hActualRaceValues, key);
}
public Native_War3_GetRaceConfigInt(Handle:plugin, numParams)
{
    new raceid = GetNativeCell(1);
    new String:shortname[SHORTNAMELEN];
    War3_GetRaceShortname(raceid, shortname, sizeof(shortname));
    KvRewind(g_hActualRaceValues);
    KvJumpToKey(g_hActualRaceValues, shortname);
    new keylen;
    GetNativeStringLength(2, keylen);
    new String:key[keylen];
    GetNativeString(2, key, keylen);
    return KvGetNum(g_hActualRaceValues, key);
}
public Native_War3_GetRaceConfigBool(Handle:plugin, numParams)
{
    new raceid = GetNativeCell(1);
    new String:shortname[SHORTNAMELEN];
    War3_GetRaceShortname(raceid, shortname, sizeof(shortname));
    KvRewind(g_hActualRaceValues);
    KvJumpToKey(g_hActualRaceValues, shortname);
    new keylen;
    GetNativeStringLength(2, keylen);
    new String:key[keylen];
    GetNativeString(2, key, keylen);
    return bool:KvGetNum(g_hActualRaceValues, key);
}
public Native_War3_GetRaceConfigArray(Handle:plugin, numParams)
{
    new raceid = GetNativeCell(1);
    new String:shortname[SHORTNAMELEN];
    War3_GetRaceShortname(raceid, shortname, sizeof(shortname));
    KvRewind(g_hActualRaceValues);
    KvJumpToKey(g_hActualRaceValues, shortname);
    new keylen;
    GetNativeStringLength(2, keylen);
    new String:key[keylen];
    GetNativeString(2, key, keylen);
    new arraylen = GetNativeCell(4);
    new KvDataTypes:type = GetNativeCell(5);
    new any:array[arraylen];
    KvJumpToKey(g_hActualRaceValues, key);
    new index = 0;
    new String:section[32];
    if(KvGotoFirstSubKey(g_hActualRaceValues, false))
    {
        do
        {
            if(index < arraylen)
            {
                KvGetSectionName(g_hActualRaceValues, section, sizeof(section));
                if(type == KvData_Float)
                {
                    array[index] = KvGetFloat(g_hActualRaceValues, section);
                } else if(type == KvData_Int) {
                    array[index] = KvGetNum(g_hActualRaceValues, section);
                } else {
                    return -1;
                }
            } else {
                break;
            }
            index ++;
        } while(KvGotoNextKey(g_hActualRaceValues, false))
    }
    SetNativeString(3, array, arraylen);
    return 1;
}





