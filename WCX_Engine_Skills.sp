/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include "W3SIncs/War3Source_Interface"

#pragma semicolon 1

new String:explosionSound1[]="war3source/particle_suck1.wav";

new BeamSprite;
new HaloSprite;
new ExplosionModel;

public Plugin:myinfo = 
{
	name = "WCX - Skills Engine",
	author = "necavi",
	description = "Provides natives for use with War3 mod",
	version = "0.1",
	url = "http://0xf.org"
}

public OnPluginStart()
{
	if(War3_GetGame()==Game_TF)
	{
		ExplosionModel=PrecacheModel("materials/particles/explosion/explosionfiresmoke.vmt",false);
		PrecacheSound("weapons/explode1.wav",false);
	}
	else
	{
		ExplosionModel=PrecacheModel("materials/sprites/zerogxplode.vmt",false);
		PrecacheSound("weapons/explode5.wav",false);
	}
	
	BeamSprite=PrecacheModel("materials/sprites/lgtning.vmt");
	HaloSprite=PrecacheModel("materials/sprites/halo01.vmt");
	
	War3_PrecacheSound(explosionSound1);
}

public bool:InitNativesForwards()
{
	CreateNative("War3_SuicideBomber",Native_War3_SuicideBomber);
	return true;
}

public Native_War3_SuicideBomber(Handle:plugin,numParams)
{
	new client = GetNativeCell(1);
	new Float:radius = GetNativeCell(4);
	new our_team = GetClientTeam(client);
	decl Float:client_location[3];
	GetNativeArray(2,client_location,sizeof(client_location));
	new bool:effects;
	if(numParams==5)
	{
		effects = bool:GetNativeCell(5);
	} else {
		effects = false;
	}
	
	if(effects)
	{
		TE_SetupExplosion(client_location,ExplosionModel,10.0,1,0,RoundToFloor(radius),160);
		TE_SendToAll();
		
		if(War3_GetGame()==Game_TF){
			
			
			ThrowAwayParticle("ExplosionCore_buildings", client_location,  5.0);
			ThrowAwayParticle("ExplosionCore_MidAir", client_location,  5.0);
			ThrowAwayParticle("ExplosionCore_MidAir_underwater", client_location,  5.0);
			ThrowAwayParticle("ExplosionCore_sapperdestroyed", client_location,  5.0);
			ThrowAwayParticle("ExplosionCore_Wall", client_location,  5.0);
			ThrowAwayParticle("ExplosionCore_Wall_underwater", client_location,  5.0);
		}
		else{
			client_location[2]-=40.0;
		}
		
		TE_SetupBeamRingPoint(client_location, 10.0, radius, BeamSprite, HaloSprite, 0, 15, 0.5, 10.0, 10.0, {255,255,255,33}, 120, 0);
		TE_SendToAll();
		
		new beamcolor[]={0,200,255,255}; //blue //secondary ring
		if(our_team==2)
		{ //TERRORISTS/RED in TF?
			beamcolor[0]=255;
			beamcolor[1]=0;
			beamcolor[2]=0;
			
		} //secondary ring
		TE_SetupBeamRingPoint(client_location, 20.0, radius+10.0, BeamSprite, HaloSprite, 0, 15, 0.5, 10.0, 10.0, beamcolor, 120, 0);
		TE_SendToAll();
		
		if(War3_GetGame()==Game_TF){
			client_location[2]-=30.0;
		}
		else{
			client_location[2]+=40.0;
		}
		
		EmitSoundToAll(explosionSound1,client);
		
		if(War3_GetGame()==Game_TF){
			EmitSoundToAll("weapons/explode1.wav",client);
		}
		else{
			EmitSoundToAll("weapons/explode5.wav",client);
		}
	}
	
	new Float:location_check[3];
	for(new x=1;x<=MaxClients;x++)
	{
		if(ValidPlayer(x,true)&&client!=x)
		{
			new team=GetClientTeam(x);
			if(team==our_team)
				continue;
			
			GetClientAbsOrigin(x,location_check);
			new Float:distance=GetVectorDistance(client_location,location_check);
			if(distance>radius)
				continue;
			
			if(!W3HasImmunity(x,Immunity_Ultimates))
			{
				new Float:factor=(radius-distance)/radius;
				new damage;
				new Float:rawdamage = Float:GetNativeCell(3);
				damage=RoundFloat(rawdamage*factor);
				War3_DealDamage(x,damage,client,_,"suicidebomber",W3DMGORIGIN_ULTIMATE,W3DMGTYPE_PHYSICAL);
				War3_ShakeScreen(x,3.0*factor,250.0*factor,30.0);
				W3FlashScreen(x,RGBA_COLOR_RED);
			}
			else
			{
				PrintToConsole(client,"%T","Could not damage player {player} due to immunity",client,x);
			}
			
		}
	}
}
